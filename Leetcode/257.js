/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {string[]}
 */

//üëçüëçüëç DFS pre_order recursion: -- dfs_preorderÊ®°ÁâàÂèòÂΩ¢È¢ò (leetcode 144)

var binaryTreePaths = function (root) {
  let allPaths = [];

  //1. Á°ÆÂÆöÈÄíÂΩíÂáΩÊï∞ ÂáΩÊï∞ÂèÇÊï∞:Ê†ëÁöÑÊ†πËäÇÁÇπ Âíå ÂΩìÂâçÁöÑÊØè‰∏ÄÊù°path: curPath, Êó†ËøîÂõûÂÄº
  const getPath = function (node, curPath) {
    //2. Á°ÆÂÆöÁªàÊ≠¢Êù°‰ª∂ÔºåÂà∞Âè∂Â≠êËäÇÁÇπÂ∞±ÁªàÊ≠¢, Êõ¥Êñ∞curPath, allPaths
    if (!node.left && !node.right) {
      curPath += node.val;
      allPaths.push(curPath);
      return;
    }

    //3. Á°ÆÂÆöÂçïÂ±ÇÈÄíÂΩíÈÄªËæë
    curPath = curPath + node.val + '->'; //‰∏≠
    node.left && getPath(node.left, curPath); // Â∑¶
    node.right && getPath(node.right, curPath); //Âè≥
  };

  getPath(root, '');
  return reallPathss;
};
